name: Create or Update Release

on:
  push:
    tags:
      - 'v*' # Trigger hanya untuk tag yang diawali dengan 'v'

jobs:
  release:
    name: Create or Update Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Pastikan semua data git history diambil

      ## Step 2: Install GitHub CLI (gh)
      #- name: Install GitHub CLI
      #  run: sudo apt-get install -y gh

      # Step 3: Set GH_TOKEN environment variable
        # GH_TOKEN digunakan oleh GitHub CLI untuk autentikasi
      - name: Configure GitHub CLI token
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GitHub CLI configured."

      # Step 5: Periksa apakah release dengan tag sudah ada
      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_EXISTS=$(gh release view ${{ github.ref_name }} --json id --jq '.id' || echo "")
          echo "RELEASE_EXISTS=$RELEASE_EXISTS" >> $GITHUB_ENV

      # Step 6: Buat release jika belum ada
      - name: Create release if not exists
        if: env.RELEASE_EXISTS == ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} build/${{ env.ZIP_NAME }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Auto-generated release for tag ${{ github.ref_name }}"

      # Tambahkan `updateJson` jika tidak ada
      - name: Append updateJson to module.prop if missing
        run: |
          UPDATE_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/update.json"
          MODULE_PROP="module.prop"

          if [ -f "$MODULE_PROP" ]; then
            if ! grep -q "updateJson" "$MODULE_PROP"; then
              echo "updateJson=$UPDATE_URL" >> "$MODULE_PROP"
              echo "updateJson added to $MODULE_PROP."
            else
              echo "updateJson already exists in $MODULE_PROP."
            fi
          else
            echo "module.prop not found. Skipping updateJson addition."
          fi
          cat $MODULE_PROP

      # Step 4: Buat file ZIP dengan mengecualikan `.github`
      - name: Create zip file
        run: |
          mkdir build
          ZIP_NAME="BoxForMagisk-WebUI-${{ github.ref_name }}.zip"
          git archive --format=zip --output="build/$ZIP_NAME" HEAD ':!/.github'
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "Build results"
          ls -la

      # Step 7: Tambahkan asset ke release yang ada
      - name: Upload asset to existing release
        if: env.RELEASE_EXISTS != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} build/${{ env.ZIP_NAME }} --clobber
