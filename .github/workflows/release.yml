name: Create or Update Release

on:
  push:
    tags:
      - 'v*' # Trigger hanya untuk tag yang diawali dengan 'v'

jobs:
  release:
    name: Create or Update Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Pastikan semua data git history diambil

      ## Step 2: Install GitHub CLI (gh)
      #- name: Install GitHub CLI
      #  run: sudo apt-get install -y gh

      # Step 3: Set GH_TOKEN environment variable
        # GH_TOKEN digunakan oleh GitHub CLI untuk autentikasi
      - name: Configure GitHub CLI token
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GitHub CLI configured."

      # Step 4: Periksa apakah release dengan tag sudah ada
      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_EXISTS=$(gh release view ${{ github.ref_name }} --json id --jq '.id' || echo "")
          echo "RELEASE_EXISTS=$RELEASE_EXISTS" >> $GITHUB_ENV

      # Step 5: Buat release jika belum ada
      - name: Create release if not exists
        if: env.RELEASE_EXISTS == ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} build/${{ env.ZIP_NAME }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Auto-generated release for tag ${{ github.ref_name }}"

      # Step 6: Update module.prop
      - name: Update module.prop
        env:
          MODULE_PROP: "module.prop"
        run: |
          UPDATE_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/release/update.json"

          # add module_prop
          touch $MODULE_PROP

          # Set version
          echo "Set version"
          if grep -q "^version=" "$MODULE_PROP"; then
            # override
            sed -i "s|^version=.*|version=${{ github.ref_name }}|" "$MODULE_PROP"
          else
            # append
            echo "version=${{ github.ref_name }}" >> "$MODULE_PROP"
          fi

          # Set version code
          echo "Set version code"
          VERSION_CODE=$(date +"%Y%m%d%H%M")
          if grep -q "^versionCode=" "$MODULE_PROP"; then
            # override
            sed -i "s|^versionCode=.*|versionCode=$VERSION_CODE|" "$MODULE_PROP"
          else
            # append
            echo "versionCode=$VERSION_CODE" >> "$MODULE_PROP"
          fi

          # Periksa apakah `updateJson` ada
          echo "Set updateJson"
          if grep -q "^updateJson=" "$MODULE_PROP"; then
            # Override nilai updateJson
            sed -i "s|^updateJson=.*|updateJson=$UPDATE_URL|" "$MODULE_PROP"
            echo "updateJson di-override dengan nilai baru di $MODULE_PROP."
          else
            # Tambahkan `updateJson` jika belum ada
            echo "updateJson=$UPDATE_URL" >> "$MODULE_PROP"
            echo "updateJson ditambahkan ke $MODULE_PROP."
          fi

          echo "result:"
          cat $MODULE_PROP

      # Step 7: Buat file ZIP dengan mengecualikan `.github`
      - name: Create zip file
        run: |
          mkdir build
          ZIP_NAME="BoxForMagisk-WebUI-${{ github.ref_name }}.zip"
          # build with github head
          # git archive --format=zip --output="build/$ZIP_NAME" HEAD ':!/.github'

          # build manual
          zip -r "build/$ZIP_NAME" . \
            -x ".git/*" \
            -x ".github/*" \
            -x "build/*"

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "Build results"
          cat $MODULE_PROP
          ls -la build

      # Step 8: Tambahkan asset ke release yang ada
      - name: Upload asset to existing release
        if: env.RELEASE_EXISTS != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} build/${{ env.ZIP_NAME }} --clobber

      # Step 9: Update changelog
      - name: Update release changelog
        run: |
          # Set identitas pengguna Git untuk commit (GitHub Actions environment)
          git config --global user.email "action@github.com"
          git config --global user.name "github-actions[bot]"

          # hapus semua perubahan
          git stash || echo "Tidak ada perubahan yang perlu di-stash."

          # Pastikan branch `release` ada, jika tidak buat branch baru
          if git show-ref --verify --quiet refs/heads/release; then
            git checkout release
          else
            git switch --orphan release
            git reset --hard
            git commit --allow-empty -m "Initial commit for release branch"
          fi

          # Fungsi untuk membuat JSON pembaruan
          get_update_json() {
            echo "{
              \"version\": \"$1\",
              \"versionCode\": \"$2\",
              \"zipUrl\": \"$3\",
              \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/release/README.md\"
            }"
          }

          # Masuk ke folder build, cek apakah file ZIP ada
          cd build || { echo "Folder build tidak ditemukan"; exit 1; }

          # Cari file ZIP
          ZIP_FILE=$(ls BoxForMagisk-WebUI-*.zip 2>/dev/null | head -n 1)
          if [ -z "$ZIP_FILE" ]; then
            echo "Tidak ada file ZIP yang ditemukan di folder build."
            exit 1
          fi

          # Ambil informasi dari file ZIP (module.prop)
          ZIP_CONTENT=$(unzip -p "$ZIP_FILE" module.prop || echo "")
          VERSION=$(echo "$ZIP_CONTENT" | grep '^version=' | cut -d '=' -f 2)
          VERSION_CODE=$(date +"%Y%m%d%H%M") # Menggunakan timestamp sebagai kode versi
          DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ github.ref_name }}/$ZIP_FILE"

          # Validasi apakah informasi versi ditemukan
          if [ -z "$VERSION" ]; then
            echo "Informasi versi tidak ditemukan di module.prop. Menggunakan fallback."
            VERSION="${{ github.ref_name }}"
          fi

          # Buat file update.json
          UPDATE_JSON_FILE="update.json"
          get_update_json "$VERSION" "$VERSION_CODE" "$DLURL" > "$UPDATE_JSON_FILE"

          # Kembali ke root dan cek hasil
          echo "File JSON pembaruan dibuat:"
          cat "$UPDATE_JSON_FILE"
          ls -la

      # Commit file update.json dan build.md
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: release
          skip_checkout: true
          file_pattern: update.json
          commit_message: "release ${{ github.ref_name }}"

          
